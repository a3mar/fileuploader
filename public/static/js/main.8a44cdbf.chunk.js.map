{"version":3,"sources":["lib/fileinput.js","lib/form.js","lib/result.js","App.js","serviceWorker.js","index.js","AMO.png"],"names":["FileInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFileSelect","e","filename","target","value","split","pop","fileext","length","match","setState","hasError","filled","console","log","concat","state","index","type","disabled","rowClasses","react_default","a","createElement","className","name","onChange","onClick","addInput","itemID","React","Component","MyForm","componentWillMount","inp_disable","inputs","current","filter","v","map","val","fileinput_FileInput","key","rmInput","push","getInputs","last","event","id","currentTarget","getAttribute","submitFn","divId","onSubmit","href","src","logo","alt","placeholder","required","ResultScreen","class","resp_time","full_size","avg_speed","first_name","last_name","comment","role","files","file","size","resetFn","App","submitButton","progress","cancelHandler","initState","classes","width","message","style","form","inprogress","finish","request","result","JSON","parse","response","reset","finished","lib_default","method","url","formRenderer","formGetter","progressRenderer","onProgress","_e","_request","_progress","onLoad","onError","onAbort","submit","form_MyForm","FormData","document","getElementById","resp","result_ResultScreen","Boolean","window","location","hostname","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8a44cdbf.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css'\n\nexport default class FileInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\"hasError\": false, \"filled\": false}\n    }\n\n    onFileSelect = (e) => {\n      let filename = e.target.value.split(/(\\\\|\\/)/g).pop()\n      let fileext = filename.split('.')[filename.split('.').length - 1]\n      let regex = /^(zip|pdf|jpg|jpeg|tiff|tif|png|doc|docx|rtf|txt|xml|xmlx|ods|odf|xls|xlsx)$/i\n\n      if (!fileext.match(regex)) {\n        this.setState({\"hasError\": true})\n        console.log(`${fileext} NOT matches`)  \n      } else {\n        this.setState({\"hasError\": false, \"filled\": true}) \n      }\n    }\n\n    filled = () => this.state.filled\n\n    render() {\n        let index = this.props.index\n        let type = this.props.type\n        let disabled = this.props.disabled()\n        let hasError = this.state.hasError\n        let rowClasses = hasError ? \"rightaligned formrow witherror\" : \"rightaligned formrow\"\n        return (\n            <div className={ rowClasses } >\n                <label> Файл {index + 1} :\n                    <input\n                        className=\"fullwidth file-input\"\n                        type=\"file\"\n                        name={`uploaded_file_${index}`}\n                        onChange={this.onFileSelect}\n                        disabled={disabled}\n                    />\n                </label>\n                <span className=\"sidebutton\" onClick={this.props.addInput} itemID={index}> {type === \"add\" ? \"+\" : \"-\" } </span>\n                { hasError &&\n                <div className=\"err_desc\">\n                  Загружаемые файлы должны быть в одном из форматов:<br /> \n                  zip, pdf, jpg, jpeg, tiff, tif, png, doc, docx, rtf, txt, xml, xmlx, xls, xlsx ods, odf\n                </div> \n                }\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport FileInput from './fileinput'\nimport '../App.css'\nimport logo from '../AMO.png'\n\nexport default class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \"inputs\": [], disabled: this.props.disabled }\n  }\n\n  componentWillMount = () => {\n    this.addInput()\n  }\n\n\n  inp_disable = () => this.props.disabled\n\n  addInput = () => {\n    if (this.state.inputs.length >= 10 || this.props.disabled) {\n      return (null)\n    }\n    let current = this.state.inputs\n      .filter((v) => { return (v !== null) })\n      .map((val, index) => {\n        return (\n          val === null ? null : <FileInput disabled={this.inp_disable} key={index} index={index} type=\"rm\" addInput={this.rmInput} />\n        )\n      })\n\n    current.push(\n      <FileInput disabled={this.inp_disable}\n        key={current.length}\n        index={current.length}\n        type=\"add\"\n        addInput={this.addInput}\n      />\n    )\n\n    this.setState({ inputs: current })\n  }\n\n  getInputs = () => {\n    let current = this.state.inputs\n      .filter((v) => { return (v !== null) })\n      .map((val, index) => {\n        return (\n          val === null ? null : <FileInput disabled={this.inp_disable} key={index} index={index} type=\"rm\" addInput={this.rmInput} />\n        )\n      })\n    \n    let last = current.length - 1\n    current[last] = <FileInput disabled={this.inp_disable} key={last} index={last} type=\"add\" addInput={this.addInput} />\n\n    return current\n  }\n\n  rmInput = (event) => {\n    let id = event.currentTarget.getAttribute('itemid')\n    let current = this.state.inputs\n    current[id] = null\n    this.setState({ inputs: current })\n  }\n\n  render() {\n    const submitFn = this.props.submitFn;\n    const divId = this.props.divId;\n    const disabled = this.props.disabled\n\n    return (\n      <form id={divId} className=\"g-form\" onSubmit={submitFn}>\n        <div className=\"header formrow\">\n          <a href='https://amo.md'><img className=\"logo\" src={logo} alt=\"Logo\" ></img></a>\n          <p>Защищенная система отправления файлов - amo.md</p>\n          <p>\n            Можно пересылать не более 10 файлов.\n            Можно захватывать несколько файлов одновременно\n            при большом количестве файлов следует упаковать их в архив (*.zip)\n          </p>\n          <p>\n            При загрузке радиологических дисков, таких как МРТ/КТ/ангиогр. и т.п.,\n            составьте архив (*.zip) всего диска, а не только избранных файлов или папок. Имя и фамилию лучше указывать латинскими буквами.\n          </p>\n        </div>\n        <hr />\n\n        <div className=\"rightaligned formrow\">\n          <label> Имя:\n            <input\n              className=\"fullwidth\"\n              type=\"text\"\n              name=\"first_name\"\n              placeholder=\"First name\"\n              disabled={disabled}\n              required />\n          </label>\n        </div>\n\n        <div className=\"rightaligned formrow\">\n          <label> Фамилия:\n             <input\n              className=\"fullwidth\"\n              type=\"text\"\n              name=\"last_name\"\n              placeholder=\"Last name\"\n              disabled={disabled}\n              required />\n          </label>\n        </div>\n\n        <div className=\"rightaligned formrow\">\n          <label> Кем загружено:\n            <div className=\"radioGroup\">\n              <label className=\"role\" > Пациент\n              <input type=\"radio\" name=\"role\" value=\"patient\" disabled={disabled} />\n              </label>\n              <label className=\"role\" > Сотрудник\n              <input type=\"radio\" name=\"role\" value=\"employee\" disabled={disabled} />\n              </label>\n            </div>\n          </label>\n\n        </div>\n        <div className=\"rightaligned formrow\">\n          <textarea\n            className=\"textarea-comment\"\n            name=\"comment\"\n            placeholder=\"Примечания к загруженным файлам (вид/зона/дата исследования и т.п.)\"\n            disabled={disabled}\n          ></textarea>\n        </div>\n        <hr />\n\n        {this.getInputs()}\n\n      </form>\n    )\n  }\n};\n","import React from 'react'\nimport '../App.css'\nimport logo from '../AMO.png'\n\nexport default class ResultScreen extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"container g-form\">\n                <div className=\"header formrow\">\n                <a href='https://amo.md'><img class=\"logo\" src={logo} alt=\"Logo\" ></img></a>\n                    <h2>Пересылка завершена:</h2>\n                    <p><span className=\"bold\">Длительность пересылки: </span> { this.props.resp_time } seconds</p>\n                    <p><span className=\"bold\">Общий объем: </span> { this.props.full_size } MB</p>\n                    <p><span className=\"bold\">Средняя скорость: </span>{ this.props.avg_speed } Mb/s</p>\n                </div><hr /><div className=\"formrow\">\n                    <h2> Ваши данные:</h2>\n                    <p><span className=\"bold\">Имя: </span>{ this.props.first_name }</p>\n                    <p><span className=\"bold\">Фамилия: </span>{ this.props.last_name }</p>\n                    <p><span className=\"bold\">Примечания (например, что исследовали): </span>{ this.props.comment }</p>\n                    <p><span className=\"bold\">Кто загружает данные: </span>{ this.props.role }</p>\n                </div><hr /><div className=\"formrow\">\n                    <h2>Файлы:</h2>\n                    {this.props.files.map((file) => {\n                        return (<p>\n                            <span className=\"bold\">{file.name}</span> : {file.size}MB успешно загружено\n                            </p>)\n                    })}\n                </div> \n                    <div class=\"return\" onClick={this.props.resetFn}>Вернуться к загрузке данных</div>\n            </div >\n        )\n    }\n}","import React from 'react';\nimport FileUploadProgress from 'react-fileupload-progress';\nimport MyForm from './lib/form'\nimport ResultScreen from './lib/result'\n\nexport default class App extends React.Component {\n  constructor() {\n    super()\n    this.state = { \n      \"inprogress\": false,\n      \"finished\": false, \n      \"result\": {\n        \"files\": [\n          {\"name\": \"test1\", \"size\": \"234KB\"}\n        ]\n      }\n    }\n  }\n\n  submitButton = (progress, hasError, cancelHandler) => {\n    let initState = progress === -1\n    let classes = hasError ? \"input-submit error\" : \"input-submit\"\n    let width = initState ? 100 : progress\n    let message = initState ? \"Отправить файлы\" : `${progress}% загружено`\n\n    return (\n      <div className=\"submit-wrapper\">\n        <div className=\"progressbar\" style={{ width: width + \"%\" }}></div>\n        <input\n          className={classes}\n          type=\"submit\"\n          form=\"myForm\"\n          disabled={this.state.inprogress}\n          value={hasError ? \"Ошибка загрузки\" : message}\n        />\n\n      </div>\n    )\n  }\n\n  progress = () => {\n    this.setState({\n      \"inprogress\": true\n    })\n  }\n\n  finish = (request) => {\n    let result = JSON.parse(request.response)\n    result.resetFn = this.reset\n\n    this.setState({\n      \"inprogress\": false,\n      \"finished\": true,\n      \"result\": result\n    })\n  }\n\n  reset = () => {\n    this.setState({\n      \"inprogress\": false,\n      \"finished\": false,\n      \"result\": {}\n    })\n  }\n\n  form = () => {\n    return (\n      <div className=\"container\">\n        <FileUploadProgress key='ex1' method=\"POST\" url='/upload'\n          formRenderer={this.formRenderer}\n          formGetter={this.formGetter}\n          progressRenderer={this.submitButton}\n          onProgress={(_e, _request, _progress) => { this.progress() }}\n          onLoad={(_e, request) => { this.finish(request) }}\n          onError={(e, request) => { console.log('error', e, request); }}\n          onAbort={(e, request) => { console.log('abort', e, request); }}\n        />\n      </div>\n    )\n  }\n  formRenderer = (submit) => <MyForm disabled={this.state.inprogress} submitFn={submit} divId=\"myForm\" />\n  formGetter = () => { return (new FormData(document.getElementById('myForm'))) }\n\n  result = (resp) => {\n    let result = this.state.result\n    return (\n      <div className=\"container\">\n        <ResultScreen { ...result} />\n      </div>\n    )\n  }\n\n  render() {\n    if (this.state.finished) {\n      return (this.result(1))\n    } else {\n      return (this.form())\n    }\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/AMO.48ed9486.png\";"],"sourceRoot":""}