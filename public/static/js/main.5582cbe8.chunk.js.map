{"version":3,"sources":["lib/fileinput.js","lib/form.js","lib/result.js","App.js","serviceWorker.js","index.js","AMO.png"],"names":["FileInput","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","index","type","react_default","a","createElement","className","name","concat","onClick","addInput","itemID","React","Component","MyForm","_this","componentWillMount","state","inputs","length","current","filter","v","map","val","fileinput_FileInput","key","rmInput","push","setState","event","id","currentTarget","getAttribute","disabled","submitFn","divId","onSubmit","href","class","src","logo","alt","placeholder","required","value","e","ResultScreen","resp_time","full_size","avg_speed","first_name","last_name","comment","role","files","file","size","resetFn","App","submitButton","progress","hasError","cancelHandler","initState","classes","width","message","style","form","finish","request","result","JSON","parse","response","reset","finished","lib_default","method","url","formRenderer","formGetter","progressRenderer","onProgress","console","log","onLoad","onError","onAbort","submit","form_MyForm","FormData","document","getElementById","resp","result_ResultScreen","Boolean","window","location","hostname","match","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.5582cbe8.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css'\n\nexport default class FileInput extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let index = this.props.index\n        let type = this.props.type\n        return (\n            <div className=\"rightaligned formrow\" >\n                <label> Файл {index + 1} :\n                    <input\n                        className=\"fullwidth file-input\"\n                        type=\"file\"\n                        name={`uploaded_file_${index}`}\n                    />\n                </label>\n                <span className=\"sidebutton\" onClick={this.props.addInput} itemID={index}> {type === \"add\" ? \"+\" : \"-\" } </span>\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport FileInput from './fileinput'\nimport '../App.css'\nimport logo from '../AMO.png'\n\nexport default class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \"inputs\": [], \"disabled\": false }\n  }\n\n  componentWillMount = () => {\n    this.addInput()\n  }\n\n  addInput = () => {\n    if (this.state.inputs.length >= 10 ) { return(null) }\n    let current = this.state.inputs\n      .filter((v) => {return(v !== null)})\n      .map((val,index) => {\n        return(\n          val === null ? null : <FileInput key={index} index={index} type=\"rm\" addInput={this.rmInput} />\n        )\n    })\n\n    current.push(\n      <FileInput key={current.length} index={current.length} type=\"add\" addInput={this.addInput} />\n    )\n\n    this.setState({inputs: current})\n  }\n\n  rmInput = (event) => {\n    let id = event.currentTarget.getAttribute('itemid')\n    let current = this.state.inputs\n    current[id] = null\n    this.setState({inputs:current})\n  }\n\n  render() {\n    const submitFn = this.props.submitFn;\n    const divId = this.props.divId;\n    return (\n      <form id={divId} className=\"g-form\" onSubmit={submitFn}>\n        <div className=\"header formrow\">\n          <a href='https://amo.md'><img class=\"logo\" src={logo} alt=\"Logo\" ></img></a>\n          <p>Защищенная система отправления файлов - amo.md</p>\n          <p>\n            Можно пересылать не более 10 файлов.\n            Можно захватывать несколько файлов одновременно\n            при большом количестве файлов следует упаковать их в архив (*.zip)\n          </p>\n          <p>\n            При загрузке радиологических дисков, таких как МРТ/КТ/ангиогр. и т.п.,\n            составьте архив (*.zip) всего диска, а не только избранных файлов или папок. Имя и фамилию лучше указывать латинскими буквами.\n          </p>\n        </div>\n        <hr />\n\n        <div className=\"rightaligned formrow\">\n          <label> Имя:\n            <input className=\"fullwidth\" type=\"text\" name=\"first_name\" placeholder=\"First name\" required />\n          </label>\n        </div>\n\n        <div className=\"rightaligned formrow\">\n          <label> Фамилия:\n             <input className=\"fullwidth\" type=\"text\" name=\"last_name\" placeholder=\"Last name\" required />\n          </label>\n        </div>\n\n        <div className=\"rightaligned formrow\">\n          <label> Кем загружено:\n            <div className=\"radioGroup\">\n              <label className=\"role\" > Пациент\n              <input type=\"radio\" name=\"role\" value=\"patient\" />\n              </label>\n              <label className=\"role\" > Сотрудник\n              <input type=\"radio\" name=\"role\" value=\"employee\" />\n              </label>\n            </div>\n          </label>\n\n        </div>\n        <div className=\"rightaligned formrow\">\n          <textarea className=\"textarea-comment\" name=\"comment\" placeholder=\"Примечания к загруженным файлам (вид/зона/дата исследования и т.п.)\"></textarea>\n        </div>\n        <hr />\n\n        { this.state.inputs.filter((e) => e !== null) }\n\n      </form>\n    )\n  }\n};\n","import React from 'react'\nimport '../App.css'\nimport logo from '../AMO.png'\n\nexport default class ResultScreen extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"container g-form\">\n                <div className=\"header formrow\">\n                <a href='https://amo.md'><img class=\"logo\" src={logo} alt=\"Logo\" ></img></a>\n                    <h2>Пересылка завершена:</h2>\n                    <p><span className=\"bold\">Длительность пересылки: </span> { this.props.resp_time } seconds</p>\n                    <p><span className=\"bold\">Общий объем: </span> { this.props.full_size } MB</p>\n                    <p><span className=\"bold\">Средняя скорость: </span>{ this.props.avg_speed } Mb/s</p>\n                </div><hr /><div className=\"formrow\">\n                    <h2> Ваши данные:</h2>\n                    <p><span className=\"bold\">Имя: </span>{ this.props.first_name }</p>\n                    <p><span className=\"bold\">Фамилия: </span>{ this.props.last_name }</p>\n                    <p><span className=\"bold\">Примечания (например, что исследовали): </span>{ this.props.comment }</p>\n                    <p><span className=\"bold\">Кто загружает данные: </span>{ this.props.role }</p>\n                </div><hr /><div className=\"formrow\">\n                    <h2>Файлы:</h2>\n                    {this.props.files.map((file) => {\n                        return (<p>\n                            <span className=\"bold\">{file.name}</span> : {file.size}MB успешно загружено\n                            </p>)\n                    })}\n                </div> \n                    <div class=\"return\" onClick={this.props.resetFn}>Вернуться к загрузке данных</div>\n            </div >\n        )\n    }\n}","import React from 'react';\nimport FileUploadProgress from 'react-fileupload-progress';\nimport MyForm from './lib/form'\nimport ResultScreen from './lib/result'\n\nexport default class App extends React.Component {\n  constructor() {\n    super()\n    this.state = { \n      \"finished\": false, \n      \"result\": {\n        \"files\": [\n          {\"name\": \"test1\", \"size\": \"234KB\"}\n        ]\n      }\n    }\n  }\n\n  submitButton = (progress, hasError, cancelHandler) => {\n    let initState = progress === -1\n    let classes = hasError ? \"input-submit error\" : \"input-submit\"\n    let width = initState ? 100 : progress\n    let message = initState ? \"Отправить файлы\" : `${progress}% загружено`\n\n    return (\n      <div className=\"submit-wrapper\">\n        <div className=\"progressbar\" style={{ width: width + \"%\" }}></div>\n        <input\n          className={classes}\n          type=\"submit\"\n          form=\"myForm\"\n          value={hasError ? \"Ошибка загрузки\" : message}\n        />\n\n      </div>\n    )\n  }\n\n  finish = (request) => {\n    let result = JSON.parse(request.response)\n    result.resetFn = this.reset\n\n    this.setState({\n      \"finished\": true,\n      \"result\": result\n    })\n  }\n\n  reset = () => {\n    this.setState({\n      \"finished\": false,\n      \"result\": {}\n    })\n  }\n\n  form = () => {\n    return (\n      <div className=\"container\">\n        <FileUploadProgress key='ex1' method=\"POST\" url='/upload'\n          formRenderer={this.formRenderer}\n          formGetter={this.formGetter}\n          progressRenderer={this.submitButton}\n          onProgress={(e, request, progress) => { console.log('progress', e, request, progress); }}\n          onLoad={(e, request) => { this.finish(request) }}\n          onError={(e, request) => { console.log('error', e, request); }}\n          onAbort={(e, request) => { console.log('abort', e, request); }}\n        />\n      </div>\n    )\n  }\n  formRenderer = (submit) => <MyForm submitFn={submit} divId=\"myForm\" />\n  formGetter = () => { return (new FormData(document.getElementById('myForm'))) }\n\n  result = (resp) => {\n    let result = this.state.result\n    return (\n      <div className=\"container\">\n        <ResultScreen { ...result} />\n      </div>\n    )\n  }\n\n  render() {\n    if (this.state.finished) {\n      return (this.result(1))\n    } else {\n      return (this.form())\n    }\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/AMO.48ed9486.png\";"],"sourceRoot":""}