{"version":3,"sources":["lib/fileinput.js","lib/form.js","lib/result.js","App.js","serviceWorker.js","index.js","AMO.png"],"names":["FileInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFileSelect","e","filename","target","value","split","pop","fileext","length","match","setState","hasError","console","log","concat","state","index","type","rowClasses","react_default","a","createElement","className","name","onChange","onClick","addInput","itemID","React","Component","MyForm","componentWillMount","inputs","current","filter","v","map","val","fileinput_FileInput","key","rmInput","push","event","id","currentTarget","getAttribute","disabled","submitFn","divId","onSubmit","href","class","src","logo","alt","placeholder","required","ResultScreen","resp_time","full_size","avg_speed","first_name","last_name","comment","role","files","file","size","resetFn","App","submitButton","progress","cancelHandler","initState","classes","width","message","style","form","finish","request","result","JSON","parse","response","reset","finished","lib_default","method","url","formRenderer","formGetter","progressRenderer","onProgress","onLoad","onError","onAbort","submit","form_MyForm","FormData","document","getElementById","resp","result_ResultScreen","Boolean","window","location","hostname","ReactDOM","render","App_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.dfb132d6.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css'\n\nexport default class FileInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\"hasError\": false}\n    }\n\n    onFileSelect = (e) => {\n      let filename = e.target.value.split(/(\\\\|\\/)/g).pop()\n      let fileext = filename.split('.')[filename.split('.').length - 1]\n      let regex = /^(zip|pdf|jpg|jpeg|tiff|tif|png|doc|docx|rtf|txt|xml|xmlx|ods|odf|xls|xlsx)$/i\n\n      if (!fileext.match(regex)) {\n        this.setState({\"hasError\": true})\n        console.log(`${fileext} NOT matches`)  \n      } else {\n        this.setState({\"hasError\": false}) \n      }\n    }\n\n    render() {\n        let index = this.props.index\n        let type = this.props.type\n        let hasError = this.state.hasError\n        let rowClasses = hasError ? \"rightaligned formrow witherror\" : \"rightaligned formrow\"\n        return (\n            <div className={ rowClasses } >\n                <label> Файл {index + 1} :\n                    <input\n                        className=\"fullwidth file-input\"\n                        type=\"file\"\n                        name={`uploaded_file_${index}`}\n                        onChange={this.onFileSelect}\n                    />\n                </label>\n                <span className=\"sidebutton\" onClick={this.props.addInput} itemID={index}> {type === \"add\" ? \"+\" : \"-\" } </span>\n                { hasError &&\n                <div className=\"err_desc\">\n                  Загружаемые файлы должны быть в одном из форматов:<br /> \n                  zip, pdf, jpg, jpeg, tiff, tif, png, doc, docx, rtf, txt, xml, xmlx, xls, xlsx ods, odf\n                </div> \n                }\n            </div>\n        )\n    }\n\n}","import React from 'react'\nimport FileInput from './fileinput'\nimport '../App.css'\nimport logo from '../AMO.png'\n\nexport default class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \"inputs\": [], \"disabled\": false }\n  }\n\n  componentWillMount = () => {\n    this.addInput()\n  }\n\n  addInput = () => {\n    if (this.state.inputs.length >= 10 ) { return(null) }\n    let current = this.state.inputs\n      .filter((v) => {return(v !== null)})\n      .map((val,index) => {\n        return(\n          val === null ? null : <FileInput key={index} index={index} type=\"rm\" addInput={this.rmInput} />\n        )\n    })\n\n    current.push(\n      <FileInput key={current.length} index={current.length} type=\"add\" addInput={this.addInput} />\n    )\n\n    this.setState({inputs: current})\n  }\n\n  rmInput = (event) => {\n    let id = event.currentTarget.getAttribute('itemid')\n    let current = this.state.inputs\n    current[id] = null\n    this.setState({inputs:current})\n  }\n\n  render() {\n    const submitFn = this.props.submitFn;\n    const divId = this.props.divId;\n    return (\n      <form id={divId} className=\"g-form\" onSubmit={submitFn}>\n        <div className=\"header formrow\">\n          <a href='https://amo.md'><img class=\"logo\" src={logo} alt=\"Logo\" ></img></a>\n          <p>Защищенная система отправления файлов - amo.md</p>\n          <p>\n            Можно пересылать не более 10 файлов.\n            Можно захватывать несколько файлов одновременно\n            при большом количестве файлов следует упаковать их в архив (*.zip)\n          </p>\n          <p>\n            При загрузке радиологических дисков, таких как МРТ/КТ/ангиогр. и т.п.,\n            составьте архив (*.zip) всего диска, а не только избранных файлов или папок. Имя и фамилию лучше указывать латинскими буквами.\n          </p>\n        </div>\n        <hr />\n\n        <div className=\"rightaligned formrow\">\n          <label> Имя:\n            <input className=\"fullwidth\" type=\"text\" name=\"first_name\" placeholder=\"First name\" required />\n          </label>\n        </div>\n\n        <div className=\"rightaligned formrow\">\n          <label> Фамилия:\n             <input className=\"fullwidth\" type=\"text\" name=\"last_name\" placeholder=\"Last name\" required />\n          </label>\n        </div>\n\n        <div className=\"rightaligned formrow\">\n          <label> Кем загружено:\n            <div className=\"radioGroup\">\n              <label className=\"role\" > Пациент\n              <input type=\"radio\" name=\"role\" value=\"patient\" />\n              </label>\n              <label className=\"role\" > Сотрудник\n              <input type=\"radio\" name=\"role\" value=\"employee\" />\n              </label>\n            </div>\n          </label>\n\n        </div>\n        <div className=\"rightaligned formrow\">\n          <textarea className=\"textarea-comment\" name=\"comment\" placeholder=\"Примечания к загруженным файлам (вид/зона/дата исследования и т.п.)\"></textarea>\n        </div>\n        <hr />\n\n        { this.state.inputs.filter((e) => e !== null) }\n\n      </form>\n    )\n  }\n};\n","import React from 'react'\nimport '../App.css'\nimport logo from '../AMO.png'\n\nexport default class ResultScreen extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"container g-form\">\n                <div className=\"header formrow\">\n                <a href='https://amo.md'><img class=\"logo\" src={logo} alt=\"Logo\" ></img></a>\n                    <h2>Пересылка завершена:</h2>\n                    <p><span className=\"bold\">Длительность пересылки: </span> { this.props.resp_time } seconds</p>\n                    <p><span className=\"bold\">Общий объем: </span> { this.props.full_size } MB</p>\n                    <p><span className=\"bold\">Средняя скорость: </span>{ this.props.avg_speed } Mb/s</p>\n                </div><hr /><div className=\"formrow\">\n                    <h2> Ваши данные:</h2>\n                    <p><span className=\"bold\">Имя: </span>{ this.props.first_name }</p>\n                    <p><span className=\"bold\">Фамилия: </span>{ this.props.last_name }</p>\n                    <p><span className=\"bold\">Примечания (например, что исследовали): </span>{ this.props.comment }</p>\n                    <p><span className=\"bold\">Кто загружает данные: </span>{ this.props.role }</p>\n                </div><hr /><div className=\"formrow\">\n                    <h2>Файлы:</h2>\n                    {this.props.files.map((file) => {\n                        return (<p>\n                            <span className=\"bold\">{file.name}</span> : {file.size}MB успешно загружено\n                            </p>)\n                    })}\n                </div> \n                    <div class=\"return\" onClick={this.props.resetFn}>Вернуться к загрузке данных</div>\n            </div >\n        )\n    }\n}","import React from 'react';\nimport FileUploadProgress from 'react-fileupload-progress';\nimport MyForm from './lib/form'\nimport ResultScreen from './lib/result'\n\nexport default class App extends React.Component {\n  constructor() {\n    super()\n    this.state = { \n      \"finished\": false, \n      \"result\": {\n        \"files\": [\n          {\"name\": \"test1\", \"size\": \"234KB\"}\n        ]\n      }\n    }\n  }\n\n  submitButton = (progress, hasError, cancelHandler) => {\n    let initState = progress === -1\n    let classes = hasError ? \"input-submit error\" : \"input-submit\"\n    let width = initState ? 100 : progress\n    let message = initState ? \"Отправить файлы\" : `${progress}% загружено`\n\n    return (\n      <div className=\"submit-wrapper\">\n        <div className=\"progressbar\" style={{ width: width + \"%\" }}></div>\n        <input\n          className={classes}\n          type=\"submit\"\n          form=\"myForm\"\n          value={hasError ? \"Ошибка загрузки\" : message}\n        />\n\n      </div>\n    )\n  }\n\n  finish = (request) => {\n    let result = JSON.parse(request.response)\n    result.resetFn = this.reset\n\n    this.setState({\n      \"finished\": true,\n      \"result\": result\n    })\n  }\n\n  reset = () => {\n    this.setState({\n      \"finished\": false,\n      \"result\": {}\n    })\n  }\n\n  form = () => {\n    return (\n      <div className=\"container\">\n        <FileUploadProgress key='ex1' method=\"POST\" url='/upload'\n          formRenderer={this.formRenderer}\n          formGetter={this.formGetter}\n          progressRenderer={this.submitButton}\n          onProgress={(e, request, progress) => { console.log('progress', e, request, progress); }}\n          onLoad={(e, request) => { this.finish(request) }}\n          onError={(e, request) => { console.log('error', e, request); }}\n          onAbort={(e, request) => { console.log('abort', e, request); }}\n        />\n      </div>\n    )\n  }\n  formRenderer = (submit) => <MyForm submitFn={submit} divId=\"myForm\" />\n  formGetter = () => { return (new FormData(document.getElementById('myForm'))) }\n\n  result = (resp) => {\n    let result = this.state.result\n    return (\n      <div className=\"container\">\n        <ResultScreen { ...result} />\n      </div>\n    )\n  }\n\n  render() {\n    if (this.state.finished) {\n      return (this.result(1))\n    } else {\n      return (this.form())\n    }\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/AMO.48ed9486.png\";"],"sourceRoot":""}